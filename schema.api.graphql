schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Query {
    getImageUploadURL(extension: String, contentType: String): AWSURL!

    getMyTimeline(limit: Int!, nextToken: String): UnhydratedTweetsPage!
    
    getMyProfile: MyProfile!

    getProfile(screenName: String!): OtherProfile

    getTweets(userId: ID!, limit: Int!, nextToken: String): TweetsPage!

    getLikes(userId: ID!, limit: Int!, nextToken: String): UnhydratedTweetsPage!

    getFollowers(userId: ID!, limit: Int!, nextToken: String): ProfilesPage!

    getFollowing(userId: ID!, limit: Int!, nextToken: String): ProfilesPage!

    search(
        query: String!,
        mode: SearchMode!,
        limit: Int!,
        nextToken: String
    ): SearchResultsPage!

    getHashTag(
        hashTag: String!,
        mode: HashTagMode!,
        limit: Int!,
        nextToken: String
    ): HashTagResultsPage!
}

type Mutation {
    editMyProfile(newProfile: ProfileInput!): MyProfile!

    tweet(text: String!): Tweet!

    like(tweetId: ID!): Boolean!

    unlike(tweetId: ID!): Boolean!

    retweet(tweetId: ID!): Retweet!

    unretweet(tweetId: ID!): Boolean!

    reply(tweetId: ID!, text: String!): Reply!

    follow(userId: ID!): Boolean!

    unfollow(userId: ID!): Boolean!

    notifyRetweeted(
        id: ID!
        userId: ID!
        tweetId: ID!
        retweetedBy: ID!
        retweetId: ID!
    ): Notification!
    @aws_iam
    
    notifyReplied(
        id: ID!
        userId: ID!
        tweetId: ID!
        repliedBy: ID!
        replyTweetId: ID!
    ): Notification!
    @aws_iam
    
    notifyLiked(
        id: ID!
        userId: ID!
        tweetId: ID!
        likedBy: ID!
    ): Notification!
    @aws_iam

    notifyMentioned(
        id: ID!
        userId: ID!
        mentionedBy: ID!
        mentionedByTweetId: ID!
    ): Notification!
    @aws_iam
}

type Subscription {
    onNotified(userId: ID!, type: NotificationType): Notification
    @aws_subscribe(mutations: ["notifyRetweeted", "notifyReplied", "notifyLiked", "notifyMentioned"])
}

enum SearchMode {
    Top
    Latest
    People
    Photos
    Videos
}

enum HashTagMode {
    Top
    Latest
    People
    Photos
    Videos
}

input ProfileInput {
    name: String!
    imageURL: AWSURL
    backgroundImageURL: AWSURL
    bio: String
    location: String
    website: AWSURL
    birthDate: AWSDate
}

interface IProfile {
    id: ID!
    name: String!
    screenName: String!
    imageURL: AWSURL
    backgroundImageURL: AWSURL
    bio: String
    location: String
    website: AWSURL
    birthDate: AWSDate
    createdAt: AWSDateTime!
    tweets: TweetsPage!
    followersCount: Int!
    followingCount: Int!
    tweetsCount: Int!
    likesCount: Int!
}

type MyProfile implements IProfile {
    id: ID!
    name: String!
    screenName: String!
    imageURL: AWSURL
    backgroundImageURL: AWSURL
    bio: String
    location: String
    website: AWSURL
    birthDate: AWSDate
    createdAt: AWSDateTime!
    tweets: TweetsPage!
    followersCount: Int!
    followingCount: Int!
    tweetsCount: Int!
    likesCount: Int!
}

type OtherProfile implements IProfile {
    id: ID!
    name: String!
    screenName: String!
    imageURL: AWSURL
    backgroundImageURL: AWSURL
    bio: String
    location: String
    website: AWSURL
    birthDate: AWSDate
    createdAt: AWSDateTime!
    tweets: TweetsPage!
    followersCount: Int!
    followingCount: Int!
    tweetsCount: Int!
    likesCount: Int!
    following: Boolean!
    followedBy: Boolean!
}

interface ITweet {
    id: ID!
    profile: IProfile!
    createdAt: AWSDateTime!
}

type Tweet implements ITweet {
    id: ID!
    profile: IProfile!
    createdAt: AWSDateTime!
    text: String!
    likes: Int!
    replies: Int!
    retweets: Int!
    liked: Boolean!
    retweeted: Boolean!
}

type Reply implements ITweet {
    id: ID!
    profile: IProfile!
    createdAt: AWSDateTime!
    inReplyToTweet: ITweet!
    inReplyToUsers: [IProfile!]
    text: String!
    likes: Int!
    replies: Int!
    retweets: Int!
    liked: Boolean!
    retweeted: Boolean!
}

type Retweet implements ITweet {
    id: ID!
    profile: IProfile!
    createdAt: AWSDateTime!
    retweetOf: ITweet!
}

type TweetsPage {
    tweets: [ITweet!]
    nextToken: String
}

type UnhydratedTweetsPage {
    tweets: [ITweet!]
    nextToken: String
}

type ProfilesPage {
    profiles: [IProfile!]
    nextToken: String
}

union SearchResult = MyProfile | OtherProfile | Tweet | Reply

type SearchResultsPage {
    results: [SearchResult!]
    nextToken: String
}

union HashTagResult = MyProfile | OtherProfile | Tweet | Reply

type HashTagResultsPage {
    results: [HashTagResult!]
    nextToken: String
}

type Retweeted @aws_iam @aws_cognito_user_pools {
    id: ID!
    userId: ID!
    tweetId: ID!
    retweetId: ID!
    retweetedBy: ID!
    createdAt: AWSDateTime!
    type: NotificationType!
}

type Replied @aws_iam @aws_cognito_user_pools {
    id: ID!
    userId: ID!
    tweetId: ID!
    repliedBy: ID!
    replyTweetId: ID!
    createdAt: AWSDateTime!
    type: NotificationType!
}

type Liked @aws_iam @aws_cognito_user_pools {
    id: ID!
    userId: ID!
    tweetId: ID!
    likedBy: ID!
    createdAt: AWSDateTime!
    type: NotificationType!
}

type Mentioned @aws_iam @aws_cognito_user_pools {
    id: ID!
    userId: ID!
    mentionedBy: ID!
    mentionedByTweetId: ID!
    createdAt: AWSDateTime!
    type: NotificationType!
}

union Notification = Retweeted | Replied | Liked | Mentioned

enum NotificationType {
  Retweeted
  Liked
  Mentioned
  Replied
} 